using System;
using Unity.Profiling;
using UnityEngine;
using AhBearStudios.Core.Profiling.Interfaces;

namespace AhBearStudios.Core.Profiling.Unity
{
    /// <summary>
    /// MonoBehaviour that provides dependency injection for IProfiler
    /// </summary>
    public class ProfilerProvider : MonoBehaviour
    {
        [SerializeField] private bool _enableProfiling = true;
        
        private IProfiler _profiler;
        
        /// <summary>
        /// The current profiler instance
        /// </summary>
        public IProfiler Profiler => _profiler;
        
        /// <summary>
        /// Whether profiling is enabled
        /// </summary>
        public bool ProfilingEnabled
        {
            get => _enableProfiling;
            set
            {
                if (_enableProfiling != value)
                {
                    _enableProfiling = value;
                    RecreateProfiler();
                }
            }
        }
        
        private void Awake()
        {
            RecreateProfiler();
        }
        
        /// <summary>
        /// Create a new profiler instance based on current settings
        /// </summary>
        private void RecreateProfiler()
        {
            // Disable old profiler if it exists
            _profiler?.StopProfiling();
            
            // Create new profiler
            _profiler = ProfilerFactory.Create(_enableProfiling);
            
            // Start profiling if enabled
            if (_enableProfiling)
            {
                _profiler.StartProfiling();
            }
        }
    }
    
    /// <summary>
    /// Extensions for working with IProfiler
    /// </summary>
    public static class ProfilerExtensions
    {
        /// <summary>
        /// Profile an action with automatic scope creation and disposal
        /// </summary>
        /// <param name="profiler">The profiler instance</param>
        /// <param name="tag">The profiler tag</param>
        /// <param name="action">The action to profile</param>
        public static void Profile(this IProfiler profiler, ProfilerTag tag, Action action)
        {
            if (profiler == null || !profiler.IsEnabled || action == null)
            {
                action?.Invoke();
                return;
            }
            
            using (profiler.BeginScope(tag))
            {
                action();
            }
        }
        
        /// <summary>
        /// Profile a function with automatic scope creation and disposal
        /// </summary>
        /// <typeparam name="T">Return type of the function</typeparam>
        /// <param name="profiler">The profiler instance</param>
        /// <param name="tag">The profiler tag</param>
        /// <param name="func">The function to profile</param>
        /// <returns>The result of the function</returns>
        public static T Profile<T>(this IProfiler profiler, ProfilerTag tag, Func<T> func)
        {
            if (profiler == null || !profiler.IsEnabled || func == null)
            {
                return func != null ? func() : default;
            }
            
            using (profiler.BeginScope(tag))
            {
                return func();
            }
        }
        
        /// <summary>
        /// Profile an action with a category and name
        /// </summary>
        /// <param name="profiler">The profiler instance</param>
        /// <param name="category">The profiler category</param>
        /// <param name="name">The scope name</param>
        /// <param name="action">The action to profile</param>
        public static void Profile(this IProfiler profiler, ProfilerCategory category, string name, Action action)
        {
            if (profiler == null || !profiler.IsEnabled || action == null)
            {
                action?.Invoke();
                return;
            }
            
            using (profiler.BeginScope(category, name))
            {
                action();
            }
        }
        
        /// <summary>
        /// Profile a function with a category and name
        /// </summary>
        /// <typeparam name="T">Return type of the function</typeparam>
        /// <param name="profiler">The profiler instance</param>
        /// <param name="category">The profiler category</param>
        /// <param name="name">The scope name</param>
        /// <param name="func">The function to profile</param>
        /// <returns>The result of the function</returns>
        public static T Profile<T>(this IProfiler profiler, ProfilerCategory category, string name, Func<T> func)
        {
            if (profiler == null || !profiler.IsEnabled || func == null)
            {
                return func != null ? func() : default;
            }
            
            using (profiler.BeginScope(category, name))
            {
                return func();
            }
        }
    }
}