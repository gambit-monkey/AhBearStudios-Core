name: Unity Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  testAllModes:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ./
        testMode:
          - playmode
          - editmode
        unityVersion:
          - 2022.3.0f1
          - 2023.2.0f1

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Git LFS checkout
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache Unity Library folder
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ runner.os }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-
            Library-${{ matrix.projectPath }}-
            Library-

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      # Run Unity tests
      - name: Run tests
        uses: game-ci/unity-test-runner@v4
        id: tests
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+AhBearStudios.Core.*'

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}-${{ matrix.unityVersion }}
          path: ${{ steps.tests.outputs.artifactsPath }}

      # Upload coverage results
      - name: Upload coverage results to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.testMode == 'editmode' # Only upload coverage once
        with:
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: testAllModes
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ./
        unityVersion:
          - 2022.3.0f1
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - WebGL # WebGL.
          - Android # Build an Android .apk.

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Git LFS checkout
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
            Library-${{ matrix.projectPath }}-
            Library-

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: AhBearStudios-Core
          buildsPath: build

      # Upload build
      - name: Upload Build
        uses: actions/upload-artifact@v3
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}
          path: build/${{ matrix.targetPlatform }}

  codeQuality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: testAllModes

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup .NET for analyzers
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      # Install code analysis tools
      - name: Install code analysis tools
        run: |
          dotnet tool install -g dotnet-format
          dotnet tool install -g security-scan

      # Run static analysis
      - name: Run static analysis
        run: |
          echo "Running static analysis on C# files..."
          find . -name "*.cs" -not -path "./Library/*" -not -path "./Temp/*" | head -10

      # Run security scan
      - name: Run security scan
        run: |
          echo "Running security analysis..."
          # security-scan ./Assets --recursive --format sarif --output security-results.sarif || true

      # Check code formatting
      - name: Check code formatting
        run: |
          echo "Checking code formatting..."
          # dotnet format --verify-no-changes --verbosity diagnostic || true

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: testAllModes
    strategy:
      matrix:
        unityVersion:
          - 2022.3.0f1

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Cache
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: ./Library
          key: Library-Performance-${{ matrix.unityVersion }}-${{ runner.os }}
          restore-keys: |
            Library-Performance-${{ matrix.unityVersion }}-
            Library-Performance-
            Library-

      # Free up disk space
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      # Run performance tests
      - name: Run performance tests
        uses: game-ci/unity-test-runner@v4
        with:
          unityVersion: ${{ matrix.unityVersion }}
          testMode: playmode
          artifactsPath: performance-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Performance Test Results
          customParameters: -runTests -testCategory "Performance"

      # Upload performance results
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Performance Results
          path: performance-artifacts

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Check documentation
      - name: Check documentation coverage
        run: |
          echo "Checking documentation coverage..."
          # Count public classes/methods without XML documentation
          undocumented_count=$(grep -r "public \(class\|interface\|struct\|enum\)" Assets/com.ahbearstudios.core --include="*.cs" | grep -v "///" | wc -l)
          echo "Undocumented public types: $undocumented_count"
          
          # Check for README files
          if [ ! -f "README.md" ]; then
            echo "Warning: No README.md found"
          fi
          
          # Check for CHANGELOG
          if [ ! -f "CHANGELOG.md" ]; then
            echo "Warning: No CHANGELOG.md found"
          fi

      # Generate documentation report
      - name: Generate documentation report
        run: |
          echo "# Documentation Report" > doc-report.md
          echo "" >> doc-report.md
          echo "## File Structure" >> doc-report.md
          find Assets/com.ahbearstudios.core -name "*.cs" | head -20 >> doc-report.md

      # Upload documentation report
      - name: Upload documentation report
        uses: actions/upload-artifact@v3
        with:
          name: Documentation Report
          path: doc-report.md

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [testAllModes, buildForAllSupportedPlatforms, codeQuality, performance, documentation]
    if: always()

    steps:
      # Send notification on success
      - name: Success notification
        if: needs.testAllModes.result == 'success' && needs.buildForAllSupportedPlatforms.result == 'success'
        run: |
          echo "✅ All tests and builds completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      # Send notification on failure
      - name: Failure notification
        if: needs.testAllModes.result == 'failure' || needs.buildForAllSupportedPlatforms.result == 'failure'
        run: |
          echo "❌ Tests or builds failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Check the logs for details."